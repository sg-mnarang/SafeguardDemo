# This is a basic workflow to help you get started with Actions

name: CI

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches: [ Development ]
    types: [ closed ]



  # Allows you to run this workflow manually from the Actions tab
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  PreJob-Requirement:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      ExperienceAPI: ${{steps.check.outputs.ExpFlag}}
      ProcessAPI: ${{steps.check.outputs.ProcessFlag}}
      SystemAPI: ${{steps.check.outputs.SystemFlag}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      
       
 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout_of_repository
        uses: actions/checkout@v2
        
 

      - name: file_changes
        id: file_changes
        uses: trilom/file-changes-action@v1.2.3
        with:
         output: ' '
      - name: list_of_files
        run: |
          echo '${{ steps.file_changes.outputs.files}}'
    
      - name: check_for_APIchange
        id: check
        env:
           Experience: ${{contains(steps.file_changes.outputs.files, 'exp')}}
           Process: ${{contains(steps.file_changes.outputs.files, 'prc')}}
           System: ${{contains(steps.file_changes.outputs.files, 'sys')}}
        run: |
         echo " Change in Experience API $Experience"
         echo " Change in Process API $Process"
         echo " Change in System API $System"
         echo "::set-output name=ExpFlag::$Experience"
         echo "::set-output name=ProcessFlag::$Process"
         echo "::set-output name=SystemFlag::$System"
         
 

        
  ExperienceAPI-Job:

     needs: [PreJob-Requirement]
     if: ${{needs.PreJob-Requirement.outputs.ExperienceAPI=='true'}}
     runs-on: ubuntu-latest
      
     steps:
     - name: checkout_of_repository
       uses: actions/checkout@v2
       
     - name: Set up JDK 1.8
       uses: actions/setup-java@v1
       with:
        java-version: 1.8
          
     - name: build server
       working-directory: ./mule-4-exp-api
       run: |
        mvn package
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
     - name: upload artifact
       uses: actions/upload-artifact@v2
       with:
          name: artifacts
          path: ./mule-4-exp-api/target/*.jar
        
     - name: download artifact
       uses: actions/download-artifact@v2
       with:
        name: artifacts
        path: ./mule-4-exp-api/
     - name: Deploy to CloudHub
       working-directory: ./mule-4-exp-api
       env:
         USERNAME: ${{ secrets.username }}
         PASSWORD: ${{ secrets.password }}
       run: |
          artifactName=$(ls *.jar | head -1)
            mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.userName="$USERNAME" -Danypoint.password="$PASSWORD" -Denvironment=Sandbox -Dappname=mule4-exp-api-DEV
          
          
  ProcessAPI-Job:

     needs: [PreJob-Requirement]
     if: ${{needs.PreJob-Requirement.outputs.ProcessAPI=='true'}}
     runs-on: ubuntu-latest
      
     steps:
     - name: checkout_of_repository
       uses: actions/checkout@v2
     - name: build server
       working-directory: ./mule4-prc-api
       run: |
        mvn package
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
     - name: upload artifact
       uses: actions/upload-artifact@v2
       with:
          name: artifacts
          path: ./mule4-prc-api/target/*.jar
        
     - name: download artifact
       uses: actions/download-artifact@v2
       with:
        name: artifacts
        path: ./mule4-prc-api/
     - name: Deploy to CloudHub
       working-directory: ./mule4-prc-api
       env:
         USERNAME: ${{ secrets.username }}
         PASSWORD: ${{ secrets.password }}
       run: |
          artifactName=$(ls *.jar | head -1)
          mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.userName="$USERNAME" -Danypoint.password="$PASSWORD" -Denvironment=Sandbox -Dappname=mule4-prc-api-DEV
          
          
  SystemAPI-Job:

     needs: [PreJob-Requirement]
     if: ${{needs.PreJob-Requirement.outputs.SystemAPI=='true'}}
     runs-on: ubuntu-latest
      
     steps:
     - name: checkout_of_repository
       uses: actions/checkout@v2
       
     - name: Set up JDK 1.8
       uses: actions/setup-java@v1
       with:
        java-version: 1.8
          
     - name: build server
       working-directory: ./mule4-sys-api
       run: |
       

        mvn clean package -DremoteRepositories=https://repo.spring.io/snhot/ -Dartifact=org.mule.modules:mule-soapkit-cxf:pom:1.2.6

        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
     - name: upload artifact
       uses: actions/upload-artifact@v2
       with:
          name: artifacts
          path: ./mule4-sys-api/target/*.jar
        
     - name: download artifact
       uses: actions/download-artifact@v2
       with:
        name: artifacts
        path: ./mule4-sys-api/
     - name: Deploy to CloudHub
       working-directory: ./mule4-sys-api
       env:
         USERNAME: ${{ secrets.username }}
         PASSWORD: ${{ secrets.password }}
       run: |
          artifactName=$(ls *.jar | head -1)
          mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.userName="$USERNAME" -Danypoint.password="$PASSWORD" -Denvironment=SANDBOX -Dappname=mule4-sys-api-DEV
